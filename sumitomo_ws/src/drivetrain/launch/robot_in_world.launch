<?xml version="1.0" ?>

<launch>
    <!-- ===== Arguments =====-->
    <arg name="rviz_config" value="$(find drivetrain)/spawn_simple.rviz"/>
    <arg name="CAN_config" value="$(find drivetrain)/config/can_bus.yaml"/>
    <arg name="CAN_controller" value="$(find drivetrain)/config/can_motor_controller.yaml"/>
    <arg name="CAN_nodes" value="$(find drivetrain)/config/motor_nodes.yaml"/>
    
    <arg name="world_name" default="$(find drivetrain)/world/test"/> <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->

    <!-- ===== Add .yamls to the parameter server ===== -->

    <!-- Load robot description -->
        <!-- Note: This loads the URDF of the robot -->
    <!-- <param name="robot_description" textfile="$(find drivetrain)/urdf/robot.urdf" /> -->
        <!-- Note: This converts from xacro to URDF of the robot -->
    <param name="robot_description" command="$(find xacro)/xacro $(find drivetrain)/urdf/simple_agv.xacro"  /> 

    <!-- Load joint controller configurations from YAML file to parameter server -->
    <!-- <rosparam command="load" file="$(arg CAN_controller)"/> -->

    <!-- ===== Launch ROS nodes ===== -->
        <!-- Load CAN configuration node (file) -->
    <node name="canopen_chain" pkg="canopen_chain_node" type="canopen_chain_node" output="screen" clear_params="true">
        <rosparam command="load" file="$(arg CAN_config)" />
        <rosparam command="load" file="$(arg CAN_controller)" />
        <rosparam command="load" file="$(arg CAN_nodes)" />
    </node>

    <!-- Load robot joint state publisher -->
        <!-- Note: Reads the robot model description, finds all of the joints, and publishes joint 
        values to all of the nonfixed joints. Different sources for the values of each joint are also available.
        Along with a GUI to visualize and intreact with the robot.
        -->
    <node name="joint_state_publisher_gui" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" />
    
    <!-- Load robot state publisher -->
        <!--Note: This package reads the current robot joint states and publishes the 3D poses 
        of each robot link using the kinematics tree built from the URDF. 
        The 3D pose of the robot is published as the tf (transform) ROS. 
        The tf ROS publishes the relationship between the coordinate frames of a robot. 
        convert joint states to TF transforms for rviz, etc -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
        <!-- Note: The following also connects the robot state publisher to Gazebo -->
        <!-- <remap from="/joint_states" to="/drivetrain/joint_states" /> -->
    </node>

    <!-- Load rviz configuration -->
    <!-- <node pkg="rviz" type="rviz" name="rviz" output="screen"/> -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rviz_config)" required="true" />

    <!-- load the controllers -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" ns="/drivetrain" args="joint1_position_controller 
                                            joint2_position_controller 
                                            joint_state_controller"/>




    <!-- TODO: Remebber to make a node that transforms from the world frame to the base link-->

    <!-- ===== Load Gazebo plugin ===== -->
        <!-- set command arguments --> 
        <arg name="command_arg1" value="-u"/>
        <arg name="command_arg2" value="-r"/> 
        <arg name="command_arg3" value="--verbose"/>
        <arg name="script_type" value="debug"/>
        <arg name="gui" default="true"/>
    
    <!-- start gazebo server-->
    <node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="false" output="screen"
	args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) $(arg world_name)" />
	
    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model simple_agv -param robot_description"/> 
    <!--         robot:name in URDF -->
    


    <!-- start gazebo client -->
    <group if="$(arg gui)">
        <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
    </group>

</launch>