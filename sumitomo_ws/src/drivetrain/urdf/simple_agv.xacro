<?xml version="1.0"?> 
<!-- ===== Initial differential robot URDF =====-->
<!-- Note: This is only for testing pourpuses of the
CAN communication programs we develop.-->

<robot name="simple_agv" xmlns:xacro="http://www.ros.org/wiki/xacro">
    <!-- Include constants xacro -->
    <xacro:include filename="$(find drivetrain)/urdf/constants.xacro"/>
    <xacro:include filename="$(find drivetrain)/urdf/parts.xacro"/>


    <!-- === Link declaration === -->

    <!-- Base link -->
    <link name="map">
        <pose>0 0 0 0 0 0</pose>
    </link>

    <!-- Simple link definition-->
    <!-- I'll use chassis as my root link-->    
    <!-- Note: The origin is relative to the link.
        it'll usually be 0, because displacement
        will happen on the Joint-->
    <link name="chassis">
        <visual>
            <geometry>
                <mesh filename="${chassis_path}" scale="${mesh_scale}"/>
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 ${pi/2}"/>
            <material name="white">
                <color rgba="0 0 1 1"/>
            </material>
        </visual>

         <!-- Collission -->
        <collision>
            <origin xyz="0 0 0" rpy="0 0 ${pi/2}"/>
            <geometry>
                <mesh filename="${chassis_path}" scale="${mesh_scale}"/>
            </geometry>
        </collision>
        
        <!-- Inertial: Requred for Gazebo -->
        <inertial>
            <mass value="${chassis_weight}"/>
            <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
        </inertial> 
    </link>
    
    <!-- === Joint definition === -->

    <!-- Reference frame -->
    <joint name="map_to_chassis" type="fixed">
        <parent link="map"/>
        <child link="chassis"/>
    </joint>

    <!-- Wheels -->
    <!-- Links with macros. It creates links, joints and transmmissions-->
    <xacro:wheel_block side="right" invert = "1" parent_link = "chassis"/>


    <xacro:wheel_block side="left" invert = "-1" parent_link = "chassis"/>
    

    <!-- === Gazebo Plugin === -->
    <gazebo>
        <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
            <robotNamespace>/</robotNamespace>
        </plugin>
    </gazebo>

    <gazebo reference="chassis">
        <material>Gazebo/Orange</material>
    </gazebo>
    <gazebo>
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">

    <!-- Plugin update rate in Hz -->
    <updateRate>50</updateRate>

    <!-- Name of left joint, defaults to `left_joint` -->
    <leftJoint>joint_wheel_left</leftJoint>

    <!-- Name of right joint, defaults to `right_joint` -->
    <rightJoint>joint_wheel_right</rightJoint>

    <!-- The distance from the center of one wheel to the other, in meters, defaults to 0.34 m -->
    <wheelSeparation>${wheel_dist}</wheelSeparation>

    <!-- Diameter of the wheels, in meters, defaults to 0.15 m -->
    <wheelDiameter>${wheel_radio*2}</wheelDiameter>

    <!-- Wheel acceleration, in rad/s^2, defaults to 0.0 rad/s^2 -->
    <wheelAcceleration>100.0</wheelAcceleration>

    <!-- Maximum torque which the wheels can produce, in Nm, defaults to 5 Nm -->
    <wheelTorque>500</wheelTorque>

    <!-- Topic to receive geometry_msgs/Twist message commands, defaults to `cmd_vel` -->
    <commandTopic>cmd_vel</commandTopic>

    <!-- Topic to publish nav_msgs/Odometry messages, defaults to `odom` -->
    <!-- <odometryTopic>odom</odometryTopic> -->

    <!-- Odometry frame, defaults to `odom` -->
    <!-- <odometryFrame>odom</odometryFrame> -->

    <!-- Robot frame to calculate odometry from, defaults to `base_footprint` -->
    <!-- <robotBaseFrame>chassis</robotBaseFrame> -->

    <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
    <!-- <odometrySource>1</odometrySource> -->

    <!-- Set to true to publish transforms for the wheel links, defaults to false -->
    <publishWheelTF>true</publishWheelTF>

    <!-- Set to true to publish transforms for the odometry, defaults to true -->
    <publishOdom>false</publishOdom>

    <!-- Set to true to publish sensor_msgs/JointState on /joint_states for the wheel joints, defaults to false -->
    <publishWheelJointState>true</publishWheelJointState>

    <!-- Set to true to swap right and left wheels, defaults to true -->
    <legacyMode>false</legacyMode>
  </plugin>
  </gazebo>
    
  </robot>
